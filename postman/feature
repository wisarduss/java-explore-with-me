{
	"info": {
		"_postman_id": "fa35a231-5d73-4e97-be9c-6b9c04c060d0",
		"name": "Comment Feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30751482",
		"_collection_link": "https://bold-crater-910890.postman.co/workspace/123321~926c6a26-70bb-4bf3-9679-83f9ffe3199e/collection/30751482-fa35a231-5d73-4e97-be9c-6b9c04c060d0?action=share&source=collection_link&creator=30751482"
	},
	"item": [
		{
			"name": "Feature",
			"item": [
				{
					"name": "Validation",
					"item": [
						{
							"name": "Добавление",
							"item": [
								{
									"name": "Отсутствует body - 400",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {",
													"    const api = new API(pm);",
													"    const rnd = new RandomUtils();",
													"",
													"    try {",
													"        const user = await api.addUser(rnd.getUser());",
													"        pm.collectionVariables.set(\"uid\", user.id)",
													"        const category = await api.addCategory(rnd.getCategory());",
													"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
													"        pm.collectionVariables.set(\"eid\", event.id)",
													"    } catch(err) {",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
													"    }",
													"};",
													"",
													"const interval = setInterval(() => {}, 1000);",
													"",
													"setTimeout(async () => ",
													"    {",
													"        try {",
													"            await main();",
													"        } catch (e) {",
													"            console.error(e);",
													"        } finally {",
													"            clearInterval(interval);",
													"        }",
													"    },  ",
													"    100 ",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
													"    pm.response.to.be.badRequest;    ",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:uid/events/:eventId/comment",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":uid",
												"events",
												":eventId",
												"comment"
											],
											"variable": [
												{
													"key": "uid",
													"value": "{{uid}}"
												},
												{
													"key": "eventId",
													"value": "{{eid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Пустой text - 400",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {",
													"    const api = new API(pm);",
													"    const rnd = new RandomUtils();",
													"",
													"    try {",
													"        const user = await api.addUser(rnd.getUser());",
													"        pm.collectionVariables.set(\"uid\", user.id)",
													"        const category = await api.addCategory(rnd.getCategory());",
													"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
													"        pm.collectionVariables.set(\"eid\", event.id)",
													"    } catch(err) {",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
													"    }",
													"};",
													"",
													"const interval = setInterval(() => {}, 1000);",
													"",
													"setTimeout(async () => ",
													"    {",
													"        try {",
													"            await main();",
													"        } catch (e) {",
													"            console.error(e);",
													"        } finally {",
													"            clearInterval(interval);",
													"        }",
													"    },  ",
													"    100 ",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
													"    pm.response.to.be.badRequest;    ",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:uid/events/:eventId/comment",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":uid",
												"events",
												":eventId",
												"comment"
											],
											"variable": [
												{
													"key": "uid",
													"value": "{{uid}}"
												},
												{
													"key": "eventId",
													"value": "{{eid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Text.lenght == 4 -> 400",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {",
													"    const api = new API(pm);",
													"    const rnd = new RandomUtils();",
													"",
													"    try {",
													"        const user = await api.addUser(rnd.getUser());",
													"        pm.collectionVariables.set(\"uid\", user.id)",
													"        const category = await api.addCategory(rnd.getCategory());",
													"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
													"        pm.collectionVariables.set(\"eid\", event.id)",
													"    } catch(err) {",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
													"    }",
													"};",
													"",
													"const interval = setInterval(() => {}, 1000);",
													"",
													"setTimeout(async () => ",
													"    {",
													"        try {",
													"            await main();",
													"        } catch (e) {",
													"            console.error(e);",
													"        } finally {",
													"            clearInterval(interval);",
													"        }",
													"    },  ",
													"    100 ",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
													"    pm.response.to.be.badRequest;    ",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:uid/events/:eventId/comment",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":uid",
												"events",
												":eventId",
												"comment"
											],
											"variable": [
												{
													"key": "uid",
													"value": "{{uid}}"
												},
												{
													"key": "eventId",
													"value": "{{eid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Несуществующий User - 404",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {",
													"    const api = new API(pm);",
													"    const rnd = new RandomUtils();",
													"",
													"    try {",
													"        const user = await api.addUser(rnd.getUser());",
													"        pm.collectionVariables.set(\"uid\", user.id)",
													"        const category = await api.addCategory(rnd.getCategory());",
													"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
													"        pm.collectionVariables.set(\"eid\", event.id)",
													"    } catch(err) {",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
													"    }",
													"};",
													"",
													"const interval = setInterval(() => {}, 1000);",
													"",
													"setTimeout(async () => ",
													"    {",
													"        try {",
													"            await main();",
													"        } catch (e) {",
													"            console.error(e);",
													"        } finally {",
													"            clearInterval(interval);",
													"        }",
													"    },  ",
													"    100 ",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
													"    pm.response.to.be.notFound;    ",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"afdsa\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:uid/events/:eventId/comment",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":uid",
												"events",
												":eventId",
												"comment"
											],
											"variable": [
												{
													"key": "uid",
													"value": "9999"
												},
												{
													"key": "eventId",
													"value": "{{eid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Несуществующий Event - 404",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {",
													"    const api = new API(pm);",
													"    const rnd = new RandomUtils();",
													"",
													"    try {",
													"        const user = await api.addUser(rnd.getUser());",
													"        pm.collectionVariables.set(\"uid\", user.id)",
													"        const category = await api.addCategory(rnd.getCategory());",
													"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
													"        pm.collectionVariables.set(\"eid\", event.id)",
													"    } catch(err) {",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
													"    }",
													"};",
													"",
													"const interval = setInterval(() => {}, 1000);",
													"",
													"setTimeout(async () => ",
													"    {",
													"        try {",
													"            await main();",
													"        } catch (e) {",
													"            console.error(e);",
													"        } finally {",
													"            clearInterval(interval);",
													"        }",
													"    },  ",
													"    100 ",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
													"    pm.response.to.be.notFound;    ",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"afdsa\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:uid/events/:eventId/comment",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":uid",
												"events",
												":eventId",
												"comment"
											],
											"variable": [
												{
													"key": "uid",
													"value": "{{uid}}"
												},
												{
													"key": "eventId",
													"value": "9999"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Event непопубликован - 409",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {",
													"    const api = new API(pm);",
													"    const rnd = new RandomUtils();",
													"",
													"    try {",
													"        const user = await api.addUser(rnd.getUser());",
													"        pm.collectionVariables.set(\"uid\", user.id)",
													"        const category = await api.addCategory(rnd.getCategory());",
													"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
													"        pm.collectionVariables.set(\"eid\", event.id)",
													"    } catch(err) {",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
													"    }",
													"};",
													"",
													"const interval = setInterval(() => {}, 1000);",
													"",
													"setTimeout(async () => ",
													"    {",
													"        try {",
													"            await main();",
													"        } catch (e) {",
													"            console.error(e);",
													"        } finally {",
													"            clearInterval(interval);",
													"        }",
													"    },  ",
													"    100 ",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
													"    pm.response.to.be.status(409);    ",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"afdsa\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:uid/events/:eventId/comment",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":uid",
												"events",
												":eventId",
												"comment"
											],
											"variable": [
												{
													"key": "uid",
													"value": "{{uid}}"
												},
												{
													"key": "eventId",
													"value": "{{eid}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Обновление",
							"item": [
								{
									"name": "Отсутствует body -> 400",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {",
													"    const api = new API(pm);",
													"    const rnd = new RandomUtils();",
													"",
													"    try {",
													"        const user = await api.addUser(rnd.getUser());",
													"        pm.collectionVariables.set(\"uid\", user.id)",
													"        const category = await api.addCategory(rnd.getCategory());",
													"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
													"        pm.collectionVariables.set(\"eid\", event.id)",
													"        event = await api.publishEvent(event.id);",
													"        const comment = await api.addComment(event.id, user.id, rnd.getComment());",
													"        pm.collectionVariables.set(\"comId\", comment.id)",
													"    } catch(err) {",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
													"    }",
													"};",
													"",
													"const interval = setInterval(() => {}, 1000);",
													"",
													"setTimeout(async () => ",
													"    {",
													"        try {",
													"            await main();",
													"        } catch (e) {",
													"            console.error(e);",
													"        } finally {",
													"            clearInterval(interval);",
													"        }",
													"    },  ",
													"    100 ",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
													"    pm.response.to.be.badRequest;    ",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:uid/events/:eventId/comment/:commentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":uid",
												"events",
												":eventId",
												"comment",
												":commentId"
											],
											"variable": [
												{
													"key": "uid",
													"value": "{{uid}}"
												},
												{
													"key": "eventId",
													"value": "{{eid}}"
												},
												{
													"key": "commentId",
													"value": "{{comId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Пустой text -> 400 Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {",
													"    const api = new API(pm);",
													"    const rnd = new RandomUtils();",
													"",
													"    try {",
													"        const user = await api.addUser(rnd.getUser());",
													"        pm.collectionVariables.set(\"uid\", user.id)",
													"        const category = await api.addCategory(rnd.getCategory());",
													"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
													"        pm.collectionVariables.set(\"eid\", event.id)",
													"        event = await api.publishEvent(event.id);",
													"        const comment = await api.addComment(event.id, user.id, rnd.getComment());",
													"        pm.collectionVariables.set(\"comId\", comment.id)",
													"    } catch(err) {",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
													"    }",
													"};",
													"",
													"const interval = setInterval(() => {}, 1000);",
													"",
													"setTimeout(async () => ",
													"    {",
													"        try {",
													"            await main();",
													"        } catch (e) {",
													"            console.error(e);",
													"        } finally {",
													"            clearInterval(interval);",
													"        }",
													"    },  ",
													"    100 ",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
													"    pm.response.to.be.badRequest;    ",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"text\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:uid/events/:eventId/comment/:commentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":uid",
												"events",
												":eventId",
												"comment",
												":commentId"
											],
											"variable": [
												{
													"key": "uid",
													"value": "{{uid}}"
												},
												{
													"key": "eventId",
													"value": "{{eid}}"
												},
												{
													"key": "commentId",
													"value": "{{comId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Text.lenght ==4 -> 400",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {",
													"    const api = new API(pm);",
													"    const rnd = new RandomUtils();",
													"",
													"    try {",
													"        const user = await api.addUser(rnd.getUser());",
													"        pm.collectionVariables.set(\"uid\", user.id)",
													"        const category = await api.addCategory(rnd.getCategory());",
													"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
													"        pm.collectionVariables.set(\"eid\", event.id)",
													"        event = await api.publishEvent(event.id);",
													"        const comment = await api.addComment(event.id, user.id, rnd.getComment());",
													"        pm.collectionVariables.set(\"comId\", comment.id)",
													"    } catch(err) {",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
													"    }",
													"};",
													"",
													"const interval = setInterval(() => {}, 1000);",
													"",
													"setTimeout(async () => ",
													"    {",
													"        try {",
													"            await main();",
													"        } catch (e) {",
													"            console.error(e);",
													"        } finally {",
													"            clearInterval(interval);",
													"        }",
													"    },  ",
													"    100 ",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
													"    pm.response.to.be.badRequest;    ",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"text\": \"1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:uid/events/:eventId/comment/:commentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":uid",
												"events",
												":eventId",
												"comment",
												":commentId"
											],
											"variable": [
												{
													"key": "uid",
													"value": "{{uid}}"
												},
												{
													"key": "eventId",
													"value": "{{eid}}"
												},
												{
													"key": "commentId",
													"value": "{{comId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Несуществующий User-> 404",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {",
													"    const api = new API(pm);",
													"    const rnd = new RandomUtils();",
													"",
													"    try {",
													"        const user = await api.addUser(rnd.getUser());",
													"        pm.collectionVariables.set(\"uid\", user.id)",
													"        const category = await api.addCategory(rnd.getCategory());",
													"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
													"        pm.collectionVariables.set(\"eid\", event.id)",
													"        event = await api.publishEvent(event.id);",
													"        const comment = await api.addComment(event.id, user.id, rnd.getComment());",
													"        pm.collectionVariables.set(\"comId\", comment.id)",
													"    } catch(err) {",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
													"    }",
													"};",
													"",
													"const interval = setInterval(() => {}, 1000);",
													"",
													"setTimeout(async () => ",
													"    {",
													"        try {",
													"            await main();",
													"        } catch (e) {",
													"            console.error(e);",
													"        } finally {",
													"            clearInterval(interval);",
													"        }",
													"    },  ",
													"    100 ",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
													"    pm.response.to.be.status(404);    ",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"text\": \"12345\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:uid/events/:eventId/comment/:commentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":uid",
												"events",
												":eventId",
												"comment",
												":commentId"
											],
											"variable": [
												{
													"key": "uid",
													"value": "9999"
												},
												{
													"key": "eventId",
													"value": "{{eid}}"
												},
												{
													"key": "commentId",
													"value": "{{comId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Несуществующий Event-> 404",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {",
													"    const api = new API(pm);",
													"    const rnd = new RandomUtils();",
													"",
													"    try {",
													"        const user = await api.addUser(rnd.getUser());",
													"        pm.collectionVariables.set(\"uid\", user.id)",
													"        const category = await api.addCategory(rnd.getCategory());",
													"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
													"        pm.collectionVariables.set(\"eid\", event.id)",
													"        event = await api.publishEvent(event.id);",
													"        const comment = await api.addComment(event.id, user.id, rnd.getComment());",
													"        pm.collectionVariables.set(\"comId\", comment.id)",
													"    } catch(err) {",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
													"    }",
													"};",
													"",
													"const interval = setInterval(() => {}, 1000);",
													"",
													"setTimeout(async () => ",
													"    {",
													"        try {",
													"            await main();",
													"        } catch (e) {",
													"            console.error(e);",
													"        } finally {",
													"            clearInterval(interval);",
													"        }",
													"    },  ",
													"    100 ",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
													"    pm.response.to.be.status(404);    ",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"text\": \"12345\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:uid/events/:eventId/comment/:commentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":uid",
												"events",
												":eventId",
												"comment",
												":commentId"
											],
											"variable": [
												{
													"key": "uid",
													"value": "{{uid}}"
												},
												{
													"key": "eventId",
													"value": "9999"
												},
												{
													"key": "commentId",
													"value": "{{comId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Несуществующий Comment-> 404",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {",
													"    const api = new API(pm);",
													"    const rnd = new RandomUtils();",
													"",
													"    try {",
													"        const user = await api.addUser(rnd.getUser());",
													"        pm.collectionVariables.set(\"uid\", user.id)",
													"        const category = await api.addCategory(rnd.getCategory());",
													"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
													"        pm.collectionVariables.set(\"eid\", event.id)",
													"        event = await api.publishEvent(event.id);",
													"        const comment = await api.addComment(event.id, user.id, rnd.getComment());",
													"        pm.collectionVariables.set(\"comId\", comment.id)",
													"    } catch(err) {",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
													"    }",
													"};",
													"",
													"const interval = setInterval(() => {}, 1000);",
													"",
													"setTimeout(async () => ",
													"    {",
													"        try {",
													"            await main();",
													"        } catch (e) {",
													"            console.error(e);",
													"        } finally {",
													"            clearInterval(interval);",
													"        }",
													"    },  ",
													"    100 ",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
													"    pm.response.to.be.status(404);    ",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"text\": \"12345\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:uid/events/:eventId/comment/:commentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":uid",
												"events",
												":eventId",
												"comment",
												":commentId"
											],
											"variable": [
												{
													"key": "uid",
													"value": "{{uid}}"
												},
												{
													"key": "eventId",
													"value": "{{eid}}"
												},
												{
													"key": "commentId",
													"value": "9999"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Удаление",
							"item": [
								{
									"name": "Несуществующий Event",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {",
													"    const api = new API(pm);",
													"    const rnd = new RandomUtils();",
													"",
													"    try {",
													"        const user = await api.addUser(rnd.getUser());",
													"        pm.collectionVariables.set(\"uid\", user.id)",
													"        const category = await api.addCategory(rnd.getCategory());",
													"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
													"        pm.collectionVariables.set(\"eid\", event.id)",
													"        event = await api.publishEvent(event.id);",
													"        const comment = await api.addComment(event.id, user.id, rnd.getComment());",
													"        pm.collectionVariables.set(\"comId\", comment.id)",
													"    } catch(err) {",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
													"    }",
													"};",
													"",
													"const interval = setInterval(() => {}, 1000);",
													"",
													"setTimeout(async () => ",
													"    {",
													"        try {",
													"            await main();",
													"        } catch (e) {",
													"            console.error(e);",
													"        } finally {",
													"            clearInterval(interval);",
													"        }",
													"    },  ",
													"    100 ",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
													"    pm.response.to.be.status(404);    ",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId/comment/:commentId/delete",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId",
												"comment",
												":commentId",
												"delete"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "9999"
												},
												{
													"key": "commentId",
													"value": "{{comId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Несуществующий Comment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {",
													"    const api = new API(pm);",
													"    const rnd = new RandomUtils();",
													"",
													"    try {",
													"        const user = await api.addUser(rnd.getUser());",
													"        pm.collectionVariables.set(\"uid\", user.id)",
													"        const category = await api.addCategory(rnd.getCategory());",
													"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
													"        pm.collectionVariables.set(\"eid\", event.id)",
													"        event = await api.publishEvent(event.id);",
													"        const comment = await api.addComment(event.id, user.id, rnd.getComment());",
													"        pm.collectionVariables.set(\"comId\", comment.id)",
													"    } catch(err) {",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
													"    }",
													"};",
													"",
													"const interval = setInterval(() => {}, 1000);",
													"",
													"setTimeout(async () => ",
													"    {",
													"        try {",
													"            await main();",
													"        } catch (e) {",
													"            console.error(e);",
													"        } finally {",
													"            clearInterval(interval);",
													"        }",
													"    },  ",
													"    100 ",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
													"    pm.response.to.be.status(404);    ",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/admin/events/:eventId/comment/:commentId/delete",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"events",
												":eventId",
												"comment",
												":commentId",
												"delete"
											],
											"variable": [
												{
													"key": "eventId",
													"value": "{{eid}}"
												},
												{
													"key": "commentId",
													"value": "9999"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Добавление комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        pm.collectionVariables.set(\"eid\", event.id)",
									"        event = await api.publishEvent(event.id);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);  ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Событие должно содержать поля: id, eventId, authorId, text\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('eventId');",
									"    pm.expect(responseData).to.have.property('authorId');",
									"    pm.expect(responseData).to.have.property('text');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"12345\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:uid/events/:eventId/comment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":uid",
								"events",
								":eventId",
								"comment"
							],
							"variable": [
								{
									"key": "uid",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        pm.collectionVariables.set(\"eid\", event.id)",
									"        event = await api.publishEvent(event.id);",
									"        const comment = await api.addComment(event.id, user.id, rnd.getComment());",
									"        pm.collectionVariables.set(\"comId\", comment.id)",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);  ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Комментарий должен содержать поля: id, eventId, authorId, text\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('eventId');",
									"    pm.expect(responseData).to.have.property('authorId');",
									"    pm.expect(responseData).to.have.property('text');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"updated\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:uid/events/:eventId/comment/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":uid",
								"events",
								":eventId",
								"comment",
								":commentId"
							],
							"variable": [
								{
									"key": "uid",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								},
								{
									"key": "commentId",
									"value": "{{comId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        pm.collectionVariables.set(\"eid\", event.id)",
									"        event = await api.publishEvent(event.id);",
									"        const comment = await api.addComment(event.id, user.id, rnd.getComment());",
									"        pm.collectionVariables.set(\"comId\", comment.id)",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204 и данные в формате json\", function () {",
									"    pm.response.to.have.status(204);  ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/events/:eventId/comment/:commentId/delete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								":eventId",
								"comment",
								":commentId",
								"delete"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eid}}"
								},
								{
									"key": "commentId",
									"value": "{{comId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addComment(eventId, userId, comment, verbose=null) {",
					"        return this.post('/users/' + userId + '/events/' + eventId + '/comment', comment, \"Ошибка при добавлении нового комментария\", verbose);",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"                    if (response.stream.length === 0){",
					"                        reject(new Error('Отправлено пустое тело ответа'))",
					"                    }else{",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"                ",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getComment() {",
					"        return {",
					"            text: pm.variables.replaceIn('{{$randomFullName}}')",
					"        };",
					"    }",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "uid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "eid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "comId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "catId",
			"value": "1",
			"type": "string"
		}
	]
}